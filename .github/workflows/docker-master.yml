name: master

on:
  push:
    branches:
      - 'master'
  schedule:
    - cron:  '00 00 * * 6' # At 12:00 AM, only on Saturday

jobs:

#########################################
####  Template
#########################################
#    - name: Build Template
#      run:  docker build --compress -t user/repo:tag path/to/folder/contains/dockerfile
#    - name: Push Template
#      run:  docker push user/repo:tag
#########################################

  build-forked-fixed-independed-images:
    name: Forked and fixed independed images
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Zabbix Agent
      run:  docker build --compress -t epicmorg/zabbix-agent:latest zabbix/agent
    - name: Push Zabbix Agent
      run:  docker push epicmorg/zabbix-agent:latest

    - name: Build Zabbix Java Gateway
      run:  docker build --compress -t epicmorg/zabbix-java-gateway:latest zabbix/java-gateway
    - name: Push Zabbix Java Gateway
      run:  docker push epicmorg/zabbix-java-gateway:latest

    - name: Build Zabbix Server with MySQL
      run:  docker build --compress -t epicmorg/zabbix-server-mysql:latest zabbix/server
    - name: Push Zabbix Server with MySQL
      run:  docker push epicmorg/zabbix-server-mysql:latest

    - name: Build Zabbix Web Apache2 with MySQL
      run:  docker build --compress -t epicmorg/zabbix-web-apache-mysql:latest zabbix/web
    - name: Push Zabbix Web Apache2 with MySQL
      run:  docker push epicmorg/zabbix-web-apache-mysql:latest

    - name: Build Zabbix Proxy SQLite3
      run:  docker build --compress -t epicmorg/zabbix-proxy-sqlite3:latest zabbix/proxy
    - name: Push Zabbix Proxy SQLite3
      run:  docker push epicmorg/zabbix-proxy-sqlite3:latest

    - name: Build NextCloud (latest)
      run:  docker build --compress -t epicmorg/nextcloud:latest nextcloud/latest
    - name: Push NextCloud (latest)
      run:  docker push epicmorg/nextcloud:latest

    - name: Build TeamCity Server (latest)
      run:  docker build --compress -t epicmorg/teamcity-server:latest teamcity/server
    - name: Push TeamCity Server (latest)
      run:  docker push epicmorg/teamcity-server:latest
 
#########################################
####  Base Production images
#########################################

  build-base-prod-iamges:
    name: Base Production images
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Base Production
      run:  docker build --compress -t epicmorg/prod:latest epicmorg/prod/main
    - name: Push Base Production
      run:  docker push epicmorg/prod:latest

    - name: Build Base Production + JDK 6
      run:  docker build --compress -t epicmorg/prod:jdk6 epicmorg/prod/jdk6
    - name: Push Base Production + JDK 6
      run:  docker push epicmorg/prod:jdk6

    - name: Build Base Production + JDK 7
      run:  docker build --compress -t epicmorg/prod:jdk7 epicmorg/prod/jdk7
    - name: Push Base Production + JDK 7
      run:  docker push epicmorg/prod:jdk7

    - name: Build Base Production + JDK 8
      run:  docker build --compress -t epicmorg/prod:jdk8 epicmorg/prod/jdk8
    - name: Push Base Production + JDK 8
      run:  docker push epicmorg/prod:jdk8

    - name: Build Base Production + JDK 11
      run:  docker build --compress -t epicmorg/prod:jdk11 epicmorg/prod/jdk11
    - name: Push Base Production + JDK 11
      run:  docker push epicmorg/prod:jdk11

#########################################
####  Base Edge images
#########################################

  build-base-edge-iamges:
    name: Base Edge images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Base Edge
      run:  docker build --compress -t epicmorg/edge:latest epicmorg/edge/main
    - name: Push Base Edge
      run:  docker push epicmorg/edge:latest

    - name: Build Base Edge + JDK 6
      run:  docker build --compress -t epicmorg/edge:jdk6 epicmorg/edge/jdk6
    - name: Push Base Edge + JDK 6
      run:  docker push epicmorg/edge:jdk6

    - name: Build Base Edge + JDK 7
      run:  docker build --compress -t epicmorg/edge:jdk7 epicmorg/edge/jdk7
    - name: Push Base Edge + JDK 7
      run:  docker push epicmorg/edge:jdk7

    - name: Build Base Edge + JDK 8
      run:  docker build --compress -t epicmorg/edge:jdk8 epicmorg/edge/jdk8
    - name: Push Base Edge + JDK 8
      run:  docker push epicmorg/edge:jdk8

    - name: Build Base Edge + JDK 11
      run:  docker build --compress -t epicmorg/edge:jdk11 epicmorg/edge/jdk11
    - name: Push Base Edge + JDK 11
      run:  docker push epicmorg/edge:jdk11

#########################################
####  Base Develop images
#########################################

  build-base-develop-iamges:
    name: Base Edge images
    runs-on: ubuntu-20.04
    needs: build-base-edge-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Base Develop
      run:  docker build --compress -t epicmorg/devel:latest epicmorg/devel/main
    - name: Push Base Develop
      run:  docker push epicmorg/devel:latest

    - name: Build Base Develop + JDK 6
      run:  docker build --compress -t epicmorg/devel:jdk6 epicmorg/devel/jdk6
    - name: Push Base Develop + JDK 6
      run:  docker push epicmorg/devel:jdk6

    - name: Build Base Develop + JDK 7
      run:  docker build --compress -t epicmorg/devel:jdk7 epicmorg/devel/jdk7
    - name: Push Base Develop + JDK 7
      run:  docker push epicmorg/devel:jdk7

    - name: Build Base Develop + JDK 8
      run:  docker build --compress -t epicmorg/devel:jdk8 epicmorg/devel/jdk8
    - name: Push Base Develop + JDK 8
      run:  docker push epicmorg/devel:jdk8

    - name: Build Base Develop + JDK 11
      run:  docker build --compress -t epicmorg/devel:jdk11 epicmorg/devel/jdk11
    - name: Push Base Develop + JDK 11
      run:  docker push epicmorg/devel:jdk11

#########################################
####  EpicMorg Main images
#########################################

  build-emg-main-iamges:
    name: EpicMorg Main images
    runs-on: ubuntu-20.04
    needs: build-base-develop-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build TeamCity Agent
      run:  docker build --compress -t epicmorg/teamcity-agent:latest teamcity/agent
    - name: Push TeamCity Agent
      run:  docker push epicmorg/teamcity-agent:latest

    - name: Build Apache (latest)
      run:  docker build --compress -t epicmorg/websites:latest websites/latest
    - name: Push Apache (latest)
      run:  docker push epicmorg/websites:latest

    - name: Build NGinx (latest)
      run:  docker build --compress -t epicmorg/balancer:latest balancer/latest
    - name: Push NGinx (latest)
      run:  docker push epicmorg/balancer:latest
 
    - name: Build Postgres (latest)
      run:  docker build --compress -t epicmorg/postgres:latest postgres/latest
    - name: Push Postgres (latest)
      run:  docker push epicmorg/postgres:latest

    - name: Build vk2discord (latest)
      run:  docker build --compress -t epicmorg/vk2discord:latest vk2discord/latest
    - name: Push vk2discord (latest)
      run:  docker push epicmorg/vk2discord:latest

#########################################
####  Testrail images
#########################################

  build-tr-iamges:
    name: Testrail images
    runs-on: ubuntu-20.04
    needs: build-emg-main-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Testrail (always latest)
      run:  docker build --compress -t epicmorg/testrail:latest testrail/latest
    - name: Push Testrail (always latest)
      run:  docker push epicmorg/testrail:latest


#########################################
####  EpicMorg Secondary images
#########################################

  build-emg-additional-web-iamges:
    name: EpicMorg Secondary images
    runs-on: ubuntu-20.04
    needs: build-emg-main-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build NGinx + PHP7.4
      run:  docker build --compress -t epicmorg/balancer:php balancer/php
    - name: Push NGinx + PHP7.4
      run:  docker push epicmorg/balancer:php

    - name: Build NGinx + RTMP-HLS
      run:  docker build --compress -t epicmorg/balancer:rtmp-hls balancer/rtmp-hls
    - name: Push NGinx + RTMP-HLS
      run:  docker push epicmorg/balancer:rtmp-hls

    - name: Build Apache + PHP7.4
      run:  docker build --compress -t epicmorg/websites:php7.4 websites/php7.4
    - name: Push Apache + PHP7.4
      run:  docker push epicmorg/websites:php7.4

    - name: Build Apache + PHP7.3
      run:  docker build --compress -t epicmorg/websites:php7.3 websites/php7.3
    - name: Push Apache + PHP7.3
      run:  docker push epicmorg/websites:php7.3

    - name: Build Apache + PHP7.2
      run:  docker build --compress -t epicmorg/websites:php7.2 websites/php7.2
    - name: Push Apache + PHP7.2
      run:  docker push epicmorg/websites:php7.2

#########################################
####  Atlassian Bitbucket images
#########################################

  build-atl-bb-iamges:
    name: Atlassian Bitbucket images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Bitbucket + JDK 8 (latest)
      run:  docker build --compress -t epicmorg/bitbucket:latest atlassian/bitbucket/latest 
    - name: Push Bitbucket + JDK 8 (latest)
      run:  docker push epicmorg/bitbucket:latest

    - name: Build Bitbucket + JDK 11 (latest-jdk11)
      run:  docker build --compress -t epicmorg/bitbucket:latest-jdk11 -f atlassian/bitbucket/latest/Dockerfile.jdk11 atlassian/bitbucket/latest
    - name: Push Bitbucket + JDK 11 (latest-jdk11)
      run:  docker push epicmorg/bitbucket:latest-jdk11

#########################################
####  Atlassian Confluence images
#########################################

  build-atl-docs-iamges:
    name: Atlassian Confluence images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Confluence + JDK 8 (latest)
      run:  docker build --compress -t epicmorg/confluence:latest atlassian/confluence/latest
    - name: Push Confluence + JDK 8 (latest)
      run:  docker push epicmorg/confluence:latest

    - name: Build Confluence + JDK 11 (latest-jdk11)
      run:  docker build --compress -t epicmorg/confluence:latest-jdk11 -f atlassian/confluence/latest/Dockerfile.jdk11 atlassian/confluence/latest
    - name: Push Confluence + JDK 11 (latest-jdk11)
      run:  docker push epicmorg/confluence:latest-jdk11

#########################################
####  Atlassian Jira images
#########################################

  build-atl-jira-iamges:
    name: Atlassian Jira images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Jira + JDK 8 (latest)
      run:  docker build --compress -t epicmorg/jira:latest atlassian/jira/latest
    - name: Push Jira + JDK 8 (latest)
      run:  docker push epicmorg/jira:latest

    - name: Build Jira + JDK 11 (latest-jdk11)
      run:  docker build --compress -t epicmorg/jira:latest-jdk11 -f atlassian/jira/latest/Dockerfile.jdk11 atlassian/jira/latest
    - name: Push Jira + JDK 11 (latest-jdk11)
      run:  docker push epicmorg/jira:latest-jdk11

#########################################
####  Atlassian Fisheye + Crucible  images
#########################################

  build-atl-fycru-iamges:
    name: Atlassian Fisheye + Crucible  images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build Fisheye + Crucible + JDK 8 (latest)
      run:  docker build --compress -t epicmorg/fisheye-crucible:latest atlassian/fisheye-crucible/latest
    - name: Push Build Fisheye + Crucible + JDK 8 (latest)
      run:  docker push epicmorg/fisheye-crucible:latest


#########################################
####  qBitTorrent  images
#########################################

  build-qbt-iamges:
    name: qBitTorrent images
    runs-on: ubuntu-20.04
    needs: build-base-edge-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build qBitTorrent (latest)
      run:  docker build --compress -t epicmorg/qbittorrent:latest qbittorrent/latest
    - name: Push qBitTorrent (latest)
      run:  docker push epicmorg/qbittorrent:latest

    - name: Build qBitTorrent (unstable)
      run:  docker build --compress -t epicmorg/qbittorrent:unstable qbittorrent/latest
    - name: Push qBitTorrent (unstable)
      run:  docker push epicmorg/qbittorrent:unstable

    - name: Build qBitTorrent (stable)
      run:  docker build --compress -t epicmorg/qbittorrent:stable qbittorrent/stable
    - name: Push qBitTorrent (stable)
      run:  docker push epicmorg/qbittorrent:stable


#########################################
####  PostgresSQL Backport images
#########################################

  build-pgsql-iamges:
    name: PostgresSQL Backport images
    runs-on: ubuntu-20.04
    needs: build-base-edge-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build PostgresSQL (8.2)
      run:  docker build --compress -t epicmorg/postgres:8.2 postgres/8.2
    - name: Push PostgresSQL (8.2)
      run:  docker push epicmorg/postgres:8.2

    - name: Build PostgresSQL (8.3)
      run:  docker build --compress -t epicmorg/postgres:8.3 postgres/8.3
    - name: Push PostgresSQL (8.3)
      run:  docker push epicmorg/postgres:8.3

    - name: Build PostgresSQL (8.4)
      run:  docker build --compress -t epicmorg/postgres:8.4 postgres/8.4
    - name: Push PostgresSQL (8.4)
      run:  docker push epicmorg/postgres:8.4

    - name: Build PostgresSQL (9.0)
      run:  docker build --compress -t epicmorg/postgres:9.0 postgres/9.0
    - name: Push PostgresSQL (9.0)
      run:  docker push epicmorg/postgres:9.0

    - name: Build PostgresSQL (9.1)
      run:  docker build --compress -t epicmorg/postgres:9.1 postgres/9.1
    - name: Push PostgresSQL (9.1)
      run:  docker push epicmorg/postgres:9.1

    - name: Build PostgresSQL (9.2)
      run:  docker build --compress -t epicmorg/postgres:9.2 postgres/9.2
    - name: Push PostgresSQL (9.2)
      run:  docker push epicmorg/postgres:9.2

    - name: Build PostgresSQL (9.3)
      run:  docker build --compress -t epicmorg/postgres:9.3 postgres/9.3
    - name: Push PostgresSQL (9.3)
      run:  docker push epicmorg/postgres:9.3

    - name: Build PostgresSQL (9.4)
      run:  docker build --compress -t epicmorg/postgres:9.4 postgres/9.4
    - name: Push PostgresSQL (9.4)
      run:  docker push epicmorg/postgres:9.4

    - name: Build PostgresSQL (9.5)
      run:  docker build --compress -t epicmorg/postgres:9.5 postgres/9.5
    - name: Push PostgresSQL (9.5)
      run:  docker push epicmorg/postgres:9.5

    - name: Build PostgresSQL (9.6)
      run:  docker build --compress -t epicmorg/postgres:9.6 postgres/9.6
    - name: Push PostgresSQL (9.6)
      run:  docker push epicmorg/postgres:9.6

    - name: Build PostgresSQL (10)
      run:  docker build --compress -t epicmorg/postgres:10 postgres/10
    - name: Push PostgresSQL (10)
      run:  docker push epicmorg/postgres:10

    - name: Build PostgresSQL (11)
      run:  docker build --compress -t epicmorg/postgres:11 postgres/11
    - name: Push PostgresSQL (11)
      run:  docker push epicmorg/postgres:11

    - name: Build PostgresSQL (12)
      run:  docker build --compress -t epicmorg/postgres:12 postgres/12
    - name: Push PostgresSQL (12)
      run:  docker push epicmorg/postgres:12

#########################################
####  NextCloud Backport images
#########################################
  build-nextcloud-backports:
    name: NextCloud Backport images
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

    - name: Build NextCloud (14)
      run:  docker build --compress -t epicmorg/nextcloud:14 nextcloud/14
    - name: Push NextCloud (14)
      run:  docker push epicmorg/nextcloud:14

    - name: Build NextCloud (15)
      run:  docker build --compress -t epicmorg/nextcloud:15 nextcloud/15
    - name: Push NextCloud (15)
      run:  docker push epicmorg/nextcloud:15

    - name: Build NextCloud (16)
      run:  docker build --compress -t epicmorg/nextcloud:16 nextcloud/16
    - name: Push NextCloud (16)
      run:  docker push epicmorg/nextcloud:16

    - name: Build NextCloud (17)
      run:  docker build --compress -t epicmorg/nextcloud:17 nextcloud/17
    - name: Push NextCloud (17)
      run:  docker push epicmorg/nextcloud:17

    - name: Build NextCloud (18)
      run:  docker build --compress -t epicmorg/nextcloud:18 nextcloud/18
    - name: Push NextCloud (18)
      run:  docker push epicmorg/nextcloud:18

    - name: Build NextCloud (19)
      run:  docker build --compress -t epicmorg/nextcloud:19 nextcloud/19
    - name: Push NextCloud (19)
      run:  docker push epicmorg/nextcloud:19

    - name: Build NextCloud (20)
      run:  docker build --compress -t epicmorg/nextcloud:20 nextcloud/20
    - name: Push NextCloud (20)
      run:  docker push epicmorg/nextcloud:20


#########################################
####  Atlassian Bitbucket 6 Backport images
#########################################

  build-atl-bb6-iamges:
    name: Atlassian Bitbucket 6 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

#    - name: Build Bitbucket + JDK 8 (xxx)
#      run:  docker build --compress -t epicmorg/bitbucket:xxx atlassian/bitbucket/6/xxx 
#    - name: Push Bitbucket + JDK 8 (xxx)
#      run:  docker push epicmorg/bitbucket:xxx

#    - name: Build Bitbucket + JDK 11 (xxx-jdk11)
#      run:  docker build --compress -t epicmorg/bitbucket:xxx-jdk11 -f atlassian/bitbucket/6/xxx/Dockerfile.jdk11 atlassian/bitbucket/6/xxx
#    - name: Push Bitbucket + JDK 11 (xxx-jdk11)
#      run:  docker push epicmorg/bitbucket:xxx-jdk11

#########################################
####  Atlassian Bitbucket 7 Backport images
#########################################

  build-atl-bb7-iamges:
    name: Atlassian Bitbucket 7 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

#    - name: Build Bitbucket + JDK 8 (xxx)
#      run:  docker build --compress -t epicmorg/bitbucket:xxx atlassian/bitbucket/7/xxx 
#    - name: Push Bitbucket + JDK 8 (xxx)
#      run:  docker push epicmorg/bitbucket:xxx

#    - name: Build Bitbucket + JDK 11 (xxx-jdk11)
#      run:  docker build --compress -t epicmorg/bitbucket:xxx-jdk11 -f atlassian/bitbucket/7/xxx/Dockerfile.jdk11 atlassian/bitbucket/7/xxx
#    - name: Push Bitbucket + JDK 11 (xxx-jdk11)
#      run:  docker push epicmorg/bitbucket:xxx-jdk11

#########################################
####  Atlassian Confluence 5 Backport images
#########################################

  build-atl-docs5-iamges:
    name: Atlassian Confluence 5 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########
 
#    - name: Build Confluence + JDK 7 (xxx)
#      run:  docker build --compress -t epicmorg/confluence:xxx atlassian/confluence/5/xxx
#    - name: Push Confluence + JDK 7 (xxx)
#      run:  docker push epicmorg/confluence:xxx

#    - name: Build Confluence + JDK 8 (xxx)
#      run:  docker build --compress -t epicmorg/confluence:xxx atlassian/confluence/6/xxx
#    - name: Push Confluence + JDK 8 (xxx)
#      run:  docker push epicmorg/confluence:xxx

    - name: Build Confluence + JDK 7 (5.5)
      run:  docker build --compress -t epicmorg/confluence:5.5 atlassian/confluence/5/5.5
    - name: Push Confluence + JDK 7 (5.5)
      run:  docker push epicmorg/confluence:5.5

    - name: Build Confluence + JDK 8 (5.9.14)
      run:  docker build --compress -t epicmorg/confluence:5.9.14 atlassian/confluence/5/5.9.14
    - name: Push Confluence + JDK 8 (5.9.14)
      run:  docker push epicmorg/confluence:5.9.14

#########################################
####  Atlassian Confluence 6 Backport images
#########################################

  build-atl-docs6-iamges:
    name: Atlassian Confluence 6 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########


#    - name: Build Confluence + JDK 8 (xxx)
#      run:  docker build --compress -t epicmorg/confluence:xxx atlassian/confluence/6/xxx
#    - name: Push Confluence + JDK 8 (xxx)
#      run:  docker push epicmorg/confluence:xxx

#    - name: Build Confluence + JDK 11 (xxx-jdk11)
#      run:  docker build --compress -t epicmorg/confluence:xxx-jdk11 -f atlassian/confluence/6/xxx/Dockerfile.jdk11 atlassian/confluence/6/xxx
#    - name: Push Confluence + JDK 11 (xxx-jdk11)
#      run:  docker push epicmorg/confluence:xxx-jdk11


#########################################
####  Atlassian Confluence 7 Backport images
#########################################

  build-atl-docs7-iamges:
    name: Atlassian Confluence 7 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########

#    - name: Build Confluence + JDK 8 (xxx)
#      run:  docker build --compress -t epicmorg/confluence:xxx atlassian/confluence/7/xxx
#    - name: Push Confluence + JDK 8 (xxx)
#      run:  docker push epicmorg/confluence:xxx

#    - name: Build Confluence + JDK 11 (xxx-jdk11)
#      run:  docker build --compress -t epicmorg/confluence:xxx-jdk11 -f atlassian/confluence/7/xxx/Dockerfile.jdk11 atlassian/confluence/7/xxx
#    - name: Push Confluence + JDK 11 (xxx-jdk11)
#      run:  docker push epicmorg/confluence:xxx-jdk11


#########################################
####  Atlassian Jira 5 Backport images
#########################################

  build-atl-jira5-iamges:
    name: Atlassian Jira 5 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########
#    - name: Build Jira + JDK 6 (xxx)
#      run:  docker build --compress -t epicmorg/jira:xxx atlassian/jira/5/xxx
#    - name: Push Jira + JDK 6 (xxx)
#      run:  docker push epicmorg/jira:xxx


#########################################
####  Atlassian Jira 6 Backport images
#########################################

  build-atl-jira6-iamges:
    name: Atlassian Jira 6 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########
#    - name: Build Jira + JDK 7 (xxx)
#      run:  docker build --compress -t epicmorg/jira:xxx atlassian/jira/6/xxx
#    - name: Push Jira + JDK 7 (xxx)
#      run:  docker push epicmorg/jira:xxx

    - name: Build Jira + JDK 7 (6.3.15)
      run:  docker build --compress -t epicmorg/jira:6.3.15 atlassian/jira/6/6.3.15
    - name: Push Jira + JDK 7 (6.3.15)
      run:  docker push epicmorg/jira:6.3.15

    - name: Build Jira + JDK 7 (6.4.14)
      run:  docker build --compress -t epicmorg/jira:6.4.14 atlassian/jira/6/6.4.14
    - name: Push Jira + JDK 7 (6.4.14)
      run:  docker push epicmorg/jira:6.4.14


#########################################
####  Atlassian Jira 7 Backport images
#########################################

  build-atl-jira7-iamges:
    name: Atlassian Jira 7 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########
#    - name: Build Jira + JDK 7 (xxx)
#      run:  docker build --compress -t epicmorg/jira:xxx atlassian/jira/7/xxx
#    - name: Push Jira + JDK 7 (xxx)
#      run:  docker push epicmorg/jira:xxx

#########################################
####  Atlassian Jira 8 Backport images
#########################################

  build-atl-jira8-iamges:
    name: Atlassian Jira 8 Backport images
    runs-on: ubuntu-20.04
    needs: build-base-prod-iamges

    steps:
    - uses: actions/checkout@v2
    - name: Log into registry
      run:  echo "${{ secrets.DOCKER_SERVER_KEY }}" | docker login -u "${{ secrets.DOCKER_SERVER_LOGIN }}" --password-stdin

##########
#    - name: Build Jira + JDK 7 (xxx)
#      run:  docker build --compress -t epicmorg/jira:xxx atlassian/jira/8/xxx
#    - name: Push Jira + JDK 7 (xxx)
#      run:  docker push epicmorg/jira:xxx
